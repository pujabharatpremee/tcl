-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_proc13 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctrl_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    ctrl_V_V_TVALID : OUT STD_LOGIC;
    ctrl_V_V_TREADY : IN STD_LOGIC;
    din_words_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    din_words_V_V_TVALID : OUT STD_LOGIC;
    din_words_V_V_TREADY : IN STD_LOGIC;
    dout_words_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    dout_words_V_V_TVALID : OUT STD_LOGIC;
    dout_words_V_V_TREADY : IN STD_LOGIC );
end;


architecture behav of Block_proc13 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ctrl_V_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal ctrl_V_V_1_vld_in : STD_LOGIC;
    signal ctrl_V_V_1_vld_out : STD_LOGIC;
    signal ctrl_V_V_1_ack_in : STD_LOGIC;
    signal ctrl_V_V_1_ack_out : STD_LOGIC;
    signal ctrl_V_V_1_sel_rd : STD_LOGIC := '0';
    signal ctrl_V_V_1_sel : STD_LOGIC;
    signal ctrl_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal din_words_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal din_words_V_V_1_vld_in : STD_LOGIC;
    signal din_words_V_V_1_vld_out : STD_LOGIC;
    signal din_words_V_V_1_ack_in : STD_LOGIC;
    signal din_words_V_V_1_ack_out : STD_LOGIC;
    signal din_words_V_V_1_sel_rd : STD_LOGIC := '0';
    signal din_words_V_V_1_sel : STD_LOGIC;
    signal din_words_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dout_words_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal dout_words_V_V_1_vld_in : STD_LOGIC;
    signal dout_words_V_V_1_vld_out : STD_LOGIC;
    signal dout_words_V_V_1_ack_in : STD_LOGIC;
    signal dout_words_V_V_1_ack_out : STD_LOGIC;
    signal dout_words_V_V_1_sel_rd : STD_LOGIC := '0';
    signal dout_words_V_V_1_sel : STD_LOGIC;
    signal dout_words_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ctrl_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal din_words_V_V_TDATA_blk_n : STD_LOGIC;
    signal dout_words_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((din_words_V_V_1_ack_in = ap_const_logic_0) or (ctrl_V_V_1_ack_in = ap_const_logic_0) or (dout_words_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ctrl_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ctrl_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ctrl_V_V_1_ack_out = ap_const_logic_1) and (ctrl_V_V_1_vld_out = ap_const_logic_1))) then 
                                        ctrl_V_V_1_sel_rd <= not(ctrl_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    ctrl_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ctrl_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((ctrl_V_V_1_state = ap_const_lv2_2) and (ctrl_V_V_1_vld_in = ap_const_logic_0)) or ((ctrl_V_V_1_state = ap_const_lv2_3) and (ctrl_V_V_1_vld_in = ap_const_logic_0) and (ctrl_V_V_1_ack_out = ap_const_logic_1)))) then 
                    ctrl_V_V_1_state <= ap_const_lv2_2;
                elsif ((((ctrl_V_V_1_state = ap_const_lv2_1) and (ctrl_V_V_1_ack_out = ap_const_logic_0)) or ((ctrl_V_V_1_state = ap_const_lv2_3) and (ctrl_V_V_1_ack_out = ap_const_logic_0) and (ctrl_V_V_1_vld_in = ap_const_logic_1)))) then 
                    ctrl_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ctrl_V_V_1_vld_in = ap_const_logic_0) and (ctrl_V_V_1_ack_out = ap_const_logic_1))) and not(((ctrl_V_V_1_ack_out = ap_const_logic_0) and (ctrl_V_V_1_vld_in = ap_const_logic_1))) and (ctrl_V_V_1_state = ap_const_lv2_3)) or ((ctrl_V_V_1_state = ap_const_lv2_1) and (ctrl_V_V_1_ack_out = ap_const_logic_1)) or ((ctrl_V_V_1_state = ap_const_lv2_2) and (ctrl_V_V_1_vld_in = ap_const_logic_1)))) then 
                    ctrl_V_V_1_state <= ap_const_lv2_3;
                else 
                    ctrl_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    din_words_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                din_words_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((din_words_V_V_1_vld_out = ap_const_logic_1) and (din_words_V_V_1_ack_out = ap_const_logic_1))) then 
                                        din_words_V_V_1_sel_rd <= not(din_words_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    din_words_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                din_words_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((din_words_V_V_1_state = ap_const_lv2_2) and (din_words_V_V_1_vld_in = ap_const_logic_0)) or ((din_words_V_V_1_state = ap_const_lv2_3) and (din_words_V_V_1_vld_in = ap_const_logic_0) and (din_words_V_V_1_ack_out = ap_const_logic_1)))) then 
                    din_words_V_V_1_state <= ap_const_lv2_2;
                elsif ((((din_words_V_V_1_state = ap_const_lv2_1) and (din_words_V_V_1_ack_out = ap_const_logic_0)) or ((din_words_V_V_1_state = ap_const_lv2_3) and (din_words_V_V_1_ack_out = ap_const_logic_0) and (din_words_V_V_1_vld_in = ap_const_logic_1)))) then 
                    din_words_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((din_words_V_V_1_vld_in = ap_const_logic_0) and (din_words_V_V_1_ack_out = ap_const_logic_1))) and not(((din_words_V_V_1_ack_out = ap_const_logic_0) and (din_words_V_V_1_vld_in = ap_const_logic_1))) and (din_words_V_V_1_state = ap_const_lv2_3)) or ((din_words_V_V_1_state = ap_const_lv2_1) and (din_words_V_V_1_ack_out = ap_const_logic_1)) or ((din_words_V_V_1_state = ap_const_lv2_2) and (din_words_V_V_1_vld_in = ap_const_logic_1)))) then 
                    din_words_V_V_1_state <= ap_const_lv2_3;
                else 
                    din_words_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dout_words_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dout_words_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dout_words_V_V_1_ack_out = ap_const_logic_1) and (dout_words_V_V_1_vld_out = ap_const_logic_1))) then 
                                        dout_words_V_V_1_sel_rd <= not(dout_words_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dout_words_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dout_words_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((dout_words_V_V_1_state = ap_const_lv2_2) and (dout_words_V_V_1_vld_in = ap_const_logic_0)) or ((dout_words_V_V_1_state = ap_const_lv2_3) and (dout_words_V_V_1_vld_in = ap_const_logic_0) and (dout_words_V_V_1_ack_out = ap_const_logic_1)))) then 
                    dout_words_V_V_1_state <= ap_const_lv2_2;
                elsif ((((dout_words_V_V_1_state = ap_const_lv2_1) and (dout_words_V_V_1_ack_out = ap_const_logic_0)) or ((dout_words_V_V_1_state = ap_const_lv2_3) and (dout_words_V_V_1_ack_out = ap_const_logic_0) and (dout_words_V_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_words_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dout_words_V_V_1_vld_in = ap_const_logic_0) and (dout_words_V_V_1_ack_out = ap_const_logic_1))) and not(((dout_words_V_V_1_ack_out = ap_const_logic_0) and (dout_words_V_V_1_vld_in = ap_const_logic_1))) and (dout_words_V_V_1_state = ap_const_lv2_3)) or ((dout_words_V_V_1_state = ap_const_lv2_1) and (dout_words_V_V_1_ack_out = ap_const_logic_1)) or ((dout_words_V_V_1_state = ap_const_lv2_2) and (dout_words_V_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_words_V_V_1_state <= ap_const_lv2_3;
                else 
                    dout_words_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ctrl_V_V_1_ack_in, din_words_V_V_1_ack_in, dout_words_V_V_1_ack_in, ap_CS_fsm_state2, ap_block_state1_io, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((din_words_V_V_1_ack_in = ap_const_logic_0) or (ctrl_V_V_1_ack_in = ap_const_logic_0) or (dout_words_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_io_assign_proc : process(ctrl_V_V_1_ack_in, din_words_V_V_1_ack_in, dout_words_V_V_1_ack_in)
    begin
                ap_block_state1_io <= ((din_words_V_V_1_ack_in = ap_const_logic_0) or (ctrl_V_V_1_ack_in = ap_const_logic_0) or (dout_words_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(ctrl_V_V_1_ack_in, din_words_V_V_1_ack_in, dout_words_V_V_1_ack_in)
    begin
                ap_block_state2 <= ((din_words_V_V_1_ack_in = ap_const_logic_0) or (ctrl_V_V_1_ack_in = ap_const_logic_0) or (dout_words_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(ctrl_V_V_1_ack_in, din_words_V_V_1_ack_in, dout_words_V_V_1_ack_in)
    begin
                ap_block_state2_io <= ((din_words_V_V_1_ack_in = ap_const_logic_0) or (ctrl_V_V_1_ack_in = ap_const_logic_0) or (dout_words_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ctrl_V_V_1_ack_in, din_words_V_V_1_ack_in, dout_words_V_V_1_ack_in, ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if ((not(((din_words_V_V_1_ack_in = ap_const_logic_0) or (ctrl_V_V_1_ack_in = ap_const_logic_0) or (dout_words_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ctrl_V_V_1_ack_in, din_words_V_V_1_ack_in, dout_words_V_V_1_ack_in, ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if ((not(((din_words_V_V_1_ack_in = ap_const_logic_0) or (ctrl_V_V_1_ack_in = ap_const_logic_0) or (dout_words_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ctrl_V_V_1_ack_in <= ctrl_V_V_1_state(1);
    ctrl_V_V_1_ack_out <= ctrl_V_V_TREADY;
    ctrl_V_V_1_data_out <= ap_const_lv32_0;
    ctrl_V_V_1_sel <= ctrl_V_V_1_sel_rd;

    ctrl_V_V_1_vld_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ctrl_V_V_1_vld_in <= ap_const_logic_1;
        else 
            ctrl_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ctrl_V_V_1_vld_out <= ctrl_V_V_1_state(0);
    ctrl_V_V_TDATA <= ctrl_V_V_1_data_out;

    ctrl_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ctrl_V_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ctrl_V_V_TDATA_blk_n <= ctrl_V_V_1_state(1);
        else 
            ctrl_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ctrl_V_V_TVALID <= ctrl_V_V_1_state(0);
    din_words_V_V_1_ack_in <= din_words_V_V_1_state(1);
    din_words_V_V_1_ack_out <= din_words_V_V_TREADY;
    din_words_V_V_1_data_out <= ap_const_lv8_10;
    din_words_V_V_1_sel <= din_words_V_V_1_sel_rd;

    din_words_V_V_1_vld_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            din_words_V_V_1_vld_in <= ap_const_logic_1;
        else 
            din_words_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    din_words_V_V_1_vld_out <= din_words_V_V_1_state(0);
    din_words_V_V_TDATA <= din_words_V_V_1_data_out;

    din_words_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, din_words_V_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            din_words_V_V_TDATA_blk_n <= din_words_V_V_1_state(1);
        else 
            din_words_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    din_words_V_V_TVALID <= din_words_V_V_1_state(0);
    dout_words_V_V_1_ack_in <= dout_words_V_V_1_state(1);
    dout_words_V_V_1_ack_out <= dout_words_V_V_TREADY;
    dout_words_V_V_1_data_out <= ap_const_lv8_10;
    dout_words_V_V_1_sel <= dout_words_V_V_1_sel_rd;

    dout_words_V_V_1_vld_in_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dout_words_V_V_1_vld_in <= ap_const_logic_1;
        else 
            dout_words_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dout_words_V_V_1_vld_out <= dout_words_V_V_1_state(0);
    dout_words_V_V_TDATA <= dout_words_V_V_1_data_out;

    dout_words_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, dout_words_V_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            dout_words_V_V_TDATA_blk_n <= dout_words_V_V_1_state(1);
        else 
            dout_words_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_words_V_V_TVALID <= dout_words_V_V_1_state(0);
end behav;
