// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_proc13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ctrl_V_V_TDATA,
        ctrl_V_V_TVALID,
        ctrl_V_V_TREADY,
        din_words_V_V_TDATA,
        din_words_V_V_TVALID,
        din_words_V_V_TREADY,
        dout_words_V_V_TDATA,
        dout_words_V_V_TVALID,
        dout_words_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] ctrl_V_V_TDATA;
output   ctrl_V_V_TVALID;
input   ctrl_V_V_TREADY;
output  [7:0] din_words_V_V_TDATA;
output   din_words_V_V_TVALID;
input   din_words_V_V_TREADY;
output  [7:0] dout_words_V_V_TDATA;
output   dout_words_V_V_TVALID;
input   dout_words_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] ctrl_V_V_1_data_out;
reg    ctrl_V_V_1_vld_in;
wire    ctrl_V_V_1_vld_out;
wire    ctrl_V_V_1_ack_in;
wire    ctrl_V_V_1_ack_out;
reg    ctrl_V_V_1_sel_rd;
wire    ctrl_V_V_1_sel;
reg   [1:0] ctrl_V_V_1_state;
wire   [7:0] din_words_V_V_1_data_out;
reg    din_words_V_V_1_vld_in;
wire    din_words_V_V_1_vld_out;
wire    din_words_V_V_1_ack_in;
wire    din_words_V_V_1_ack_out;
reg    din_words_V_V_1_sel_rd;
wire    din_words_V_V_1_sel;
reg   [1:0] din_words_V_V_1_state;
wire   [7:0] dout_words_V_V_1_data_out;
reg    dout_words_V_V_1_vld_in;
wire    dout_words_V_V_1_vld_out;
wire    dout_words_V_V_1_ack_in;
wire    dout_words_V_V_1_ack_out;
reg    dout_words_V_V_1_sel_rd;
wire    dout_words_V_V_1_sel;
reg   [1:0] dout_words_V_V_1_state;
reg    ctrl_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    din_words_V_V_TDATA_blk_n;
reg    dout_words_V_V_TDATA_blk_n;
reg    ap_block_state1;
reg    ap_block_state1_io;
reg    ap_block_state2;
reg    ap_block_state2_io;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ctrl_V_V_1_sel_rd = 1'b0;
#0 ctrl_V_V_1_state = 2'd0;
#0 din_words_V_V_1_sel_rd = 1'b0;
#0 din_words_V_V_1_state = 2'd0;
#0 dout_words_V_V_1_sel_rd = 1'b0;
#0 dout_words_V_V_1_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((din_words_V_V_1_ack_in == 1'b0) | (ctrl_V_V_1_ack_in == 1'b0) | (dout_words_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ctrl_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((ctrl_V_V_1_ack_out == 1'b1) & (ctrl_V_V_1_vld_out == 1'b1))) begin
            ctrl_V_V_1_sel_rd <= ~ctrl_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ctrl_V_V_1_state <= 2'd0;
    end else begin
        if ((((ctrl_V_V_1_state == 2'd2) & (ctrl_V_V_1_vld_in == 1'b0)) | ((ctrl_V_V_1_state == 2'd3) & (ctrl_V_V_1_vld_in == 1'b0) & (ctrl_V_V_1_ack_out == 1'b1)))) begin
            ctrl_V_V_1_state <= 2'd2;
        end else if ((((ctrl_V_V_1_state == 2'd1) & (ctrl_V_V_1_ack_out == 1'b0)) | ((ctrl_V_V_1_state == 2'd3) & (ctrl_V_V_1_ack_out == 1'b0) & (ctrl_V_V_1_vld_in == 1'b1)))) begin
            ctrl_V_V_1_state <= 2'd1;
        end else if (((~((ctrl_V_V_1_vld_in == 1'b0) & (ctrl_V_V_1_ack_out == 1'b1)) & ~((ctrl_V_V_1_ack_out == 1'b0) & (ctrl_V_V_1_vld_in == 1'b1)) & (ctrl_V_V_1_state == 2'd3)) | ((ctrl_V_V_1_state == 2'd1) & (ctrl_V_V_1_ack_out == 1'b1)) | ((ctrl_V_V_1_state == 2'd2) & (ctrl_V_V_1_vld_in == 1'b1)))) begin
            ctrl_V_V_1_state <= 2'd3;
        end else begin
            ctrl_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        din_words_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((din_words_V_V_1_vld_out == 1'b1) & (din_words_V_V_1_ack_out == 1'b1))) begin
            din_words_V_V_1_sel_rd <= ~din_words_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        din_words_V_V_1_state <= 2'd0;
    end else begin
        if ((((din_words_V_V_1_state == 2'd2) & (din_words_V_V_1_vld_in == 1'b0)) | ((din_words_V_V_1_state == 2'd3) & (din_words_V_V_1_vld_in == 1'b0) & (din_words_V_V_1_ack_out == 1'b1)))) begin
            din_words_V_V_1_state <= 2'd2;
        end else if ((((din_words_V_V_1_state == 2'd1) & (din_words_V_V_1_ack_out == 1'b0)) | ((din_words_V_V_1_state == 2'd3) & (din_words_V_V_1_ack_out == 1'b0) & (din_words_V_V_1_vld_in == 1'b1)))) begin
            din_words_V_V_1_state <= 2'd1;
        end else if (((~((din_words_V_V_1_vld_in == 1'b0) & (din_words_V_V_1_ack_out == 1'b1)) & ~((din_words_V_V_1_ack_out == 1'b0) & (din_words_V_V_1_vld_in == 1'b1)) & (din_words_V_V_1_state == 2'd3)) | ((din_words_V_V_1_state == 2'd1) & (din_words_V_V_1_ack_out == 1'b1)) | ((din_words_V_V_1_state == 2'd2) & (din_words_V_V_1_vld_in == 1'b1)))) begin
            din_words_V_V_1_state <= 2'd3;
        end else begin
            din_words_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dout_words_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dout_words_V_V_1_ack_out == 1'b1) & (dout_words_V_V_1_vld_out == 1'b1))) begin
            dout_words_V_V_1_sel_rd <= ~dout_words_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dout_words_V_V_1_state <= 2'd0;
    end else begin
        if ((((dout_words_V_V_1_state == 2'd2) & (dout_words_V_V_1_vld_in == 1'b0)) | ((dout_words_V_V_1_state == 2'd3) & (dout_words_V_V_1_vld_in == 1'b0) & (dout_words_V_V_1_ack_out == 1'b1)))) begin
            dout_words_V_V_1_state <= 2'd2;
        end else if ((((dout_words_V_V_1_state == 2'd1) & (dout_words_V_V_1_ack_out == 1'b0)) | ((dout_words_V_V_1_state == 2'd3) & (dout_words_V_V_1_ack_out == 1'b0) & (dout_words_V_V_1_vld_in == 1'b1)))) begin
            dout_words_V_V_1_state <= 2'd1;
        end else if (((~((dout_words_V_V_1_vld_in == 1'b0) & (dout_words_V_V_1_ack_out == 1'b1)) & ~((dout_words_V_V_1_ack_out == 1'b0) & (dout_words_V_V_1_vld_in == 1'b1)) & (dout_words_V_V_1_state == 2'd3)) | ((dout_words_V_V_1_state == 2'd1) & (dout_words_V_V_1_ack_out == 1'b1)) | ((dout_words_V_V_1_state == 2'd2) & (dout_words_V_V_1_vld_in == 1'b1)))) begin
            dout_words_V_V_1_state <= 2'd3;
        end else begin
            dout_words_V_V_1_state <= 2'd2;
        end
    end
end

always @ (*) begin
    if ((~((din_words_V_V_1_ack_in == 1'b0) | (ctrl_V_V_1_ack_in == 1'b0) | (dout_words_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((din_words_V_V_1_ack_in == 1'b0) | (ctrl_V_V_1_ack_in == 1'b0) | (dout_words_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ctrl_V_V_1_vld_in = 1'b1;
    end else begin
        ctrl_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        ctrl_V_V_TDATA_blk_n = ctrl_V_V_1_state[1'd1];
    end else begin
        ctrl_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        din_words_V_V_1_vld_in = 1'b1;
    end else begin
        din_words_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        din_words_V_V_TDATA_blk_n = din_words_V_V_1_state[1'd1];
    end else begin
        din_words_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dout_words_V_V_1_vld_in = 1'b1;
    end else begin
        dout_words_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        dout_words_V_V_TDATA_blk_n = dout_words_V_V_1_state[1'd1];
    end else begin
        dout_words_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((din_words_V_V_1_ack_in == 1'b0) | (ctrl_V_V_1_ack_in == 1'b0) | (dout_words_V_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_io = ((din_words_V_V_1_ack_in == 1'b0) | (ctrl_V_V_1_ack_in == 1'b0) | (dout_words_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((din_words_V_V_1_ack_in == 1'b0) | (ctrl_V_V_1_ack_in == 1'b0) | (dout_words_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((din_words_V_V_1_ack_in == 1'b0) | (ctrl_V_V_1_ack_in == 1'b0) | (dout_words_V_V_1_ack_in == 1'b0));
end

assign ctrl_V_V_1_ack_in = ctrl_V_V_1_state[1'd1];

assign ctrl_V_V_1_ack_out = ctrl_V_V_TREADY;

assign ctrl_V_V_1_data_out = 32'd0;

assign ctrl_V_V_1_sel = ctrl_V_V_1_sel_rd;

assign ctrl_V_V_1_vld_out = ctrl_V_V_1_state[1'd0];

assign ctrl_V_V_TDATA = ctrl_V_V_1_data_out;

assign ctrl_V_V_TVALID = ctrl_V_V_1_state[1'd0];

assign din_words_V_V_1_ack_in = din_words_V_V_1_state[1'd1];

assign din_words_V_V_1_ack_out = din_words_V_V_TREADY;

assign din_words_V_V_1_data_out = 8'd16;

assign din_words_V_V_1_sel = din_words_V_V_1_sel_rd;

assign din_words_V_V_1_vld_out = din_words_V_V_1_state[1'd0];

assign din_words_V_V_TDATA = din_words_V_V_1_data_out;

assign din_words_V_V_TVALID = din_words_V_V_1_state[1'd0];

assign dout_words_V_V_1_ack_in = dout_words_V_V_1_state[1'd1];

assign dout_words_V_V_1_ack_out = dout_words_V_V_TREADY;

assign dout_words_V_V_1_data_out = 8'd16;

assign dout_words_V_V_1_sel = dout_words_V_V_1_sel_rd;

assign dout_words_V_V_1_vld_out = dout_words_V_V_1_state[1'd0];

assign dout_words_V_V_TDATA = dout_words_V_V_1_data_out;

assign dout_words_V_V_TVALID = dout_words_V_V_1_state[1'd0];

endmodule //Block_proc13
